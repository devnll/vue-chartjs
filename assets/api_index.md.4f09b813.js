import{_ as t,c as e,o as a,a as n}from"./app.8905febc.js";const f='{"title":"Coding Reference","description":"","frontmatter":{},"headers":[{"level":2,"title":"Props","slug":"props"},{"level":2,"title":"Events","slug":"events"},{"level":2,"title":"Global Methods","slug":"global-methods"},{"level":3,"title":"generateChart","slug":"generatechart"}],"relativePath":"api/index.md","lastUpdated":1662619208000}',s={},r=n(`<h1 id="coding-reference" tabindex="-1">Coding Reference <a class="header-anchor" href="#coding-reference" aria-hidden="true">#</a></h1><h2 id="props" tabindex="-1">Props <a class="header-anchor" href="#props" aria-hidden="true">#</a></h2><p>There are some basic props defined in the components provided by <code>vue-chartjs</code>.</p><table><thead><tr><th>Prop</th><th>Description</th></tr></thead><tbody><tr><td>chartData</td><td>Object with Chart data</td></tr><tr><td>chartOptions</td><td>Object with Chart options</td></tr><tr><td>datasetIdKey</td><td>Id key for Chart data datasets</td></tr><tr><td>chartId</td><td>Id of the canvas</td></tr><tr><td>width</td><td>Chart width</td></tr><tr><td>height</td><td>Chart height</td></tr><tr><td>cssClasses</td><td>String with css classes for the surrounding div</td></tr><tr><td>styles</td><td>Object with css styles for the surrounding div container</td></tr><tr><td>plugins</td><td>Array with Chart plugins</td></tr></tbody></table><h2 id="events" tabindex="-1">Events <a class="header-anchor" href="#events" aria-hidden="true">#</a></h2><p>Charts will emit events if the data changes. You can listen to them in the chart component. The following events are available:</p><table><thead><tr><th>Event</th><th>Description</th></tr></thead><tbody><tr><td><code>chart:rendered</code></td><td>if the chart object instance rendered</td></tr><tr><td><code>chart:destroyed</code></td><td>if the chart object instance removed</td></tr><tr><td><code>chart:updated</code></td><td>if the update handler performs an update instead of a re-render</td></tr><tr><td><code>labels:updated</code></td><td>if new labels were set</td></tr></tbody></table><h2 id="global-methods" tabindex="-1">Global Methods <a class="header-anchor" href="#global-methods" aria-hidden="true">#</a></h2><p>Global Methods need to be imported.</p><h3 id="generatechart" tabindex="-1">generateChart <a class="header-anchor" href="#generatechart" aria-hidden="true">#</a></h3><ul><li><strong>Type:</strong> <code>Function</code></li><li><strong>Arguments</strong>: <code>chart-id</code>, <code>chart-type</code>, <code>chart-controller</code></li><li><strong>Usage:</strong></li></ul><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> generateChart <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue-chartjs&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> LineController <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;chart.js&#39;</span>
<span class="token comment">// The first argument is the chart-id, the second the chart type, third is the custom controller</span>
<span class="token keyword">const</span> CustomLine <span class="token operator">=</span> <span class="token function">generateChart</span><span class="token punctuation">(</span><span class="token string">&#39;custom-line&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;line&#39;</span><span class="token punctuation">,</span> LineController<span class="token punctuation">)</span>
</code></pre></div>`,12),d=[r];function o(c,i,h,l,p,u){return a(),e("div",null,d)}var b=t(s,[["render",o]]);export{f as __pageData,b as default};
